sv_interface(config) ::= <<
module <config.moduleLowerName> #(
    parameter type reg_req_t  = logic,
    parameter type reg_rsp_t  = logic,
    parameter type obi_req_t  = logic,
    parameter type obi_resp_t = logic
) (
    input logic clk_i,
    input logic rst_ni,
    <if(config.moduleHasReg)>
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o<if(config.moduleHasObiMaster || config.moduleHasObiSlave)>,<endif>
    <endif>
    <if(config.moduleHasObiMaster)>
    output obi_req_t masters_req_o,
    output obi_resp_t masters_resp_i<if(config.moduleHasObiSlave)>,<endif>
    <endif>
    <if(config.moduleHasObiSlave)>
    input obi_req_t slave_req_i,
    output obi_resp_t slave_resp_o
    <endif>
);

  <config.moduleTemplateRegisters:{ reg | <reg.verilogType> [<reg.widthMinusOne>:0] <reg.name>;
  }>

  <if(config.moduleHasReg)>
  assign reg_rsp_o.error = 1'b0;
  assign reg_rsp_o.ready = 1'b1;
  assign reg_rsp_o.rdata = 32'b0;
  <endif>

  import "DPI-C" function void <config.moduleLowerName>_comm_init();
  import "DPI-C" function void <config.moduleLowerName>_comm_free();
  import "DPI-C" function void <config.moduleLowerName>_comm_send(<config.dpiSendSignature>);
  import "DPI-C" function void <config.moduleLowerName>_comm_recv(<config.dpiRecvSignature>);

  initial begin
    <config.moduleLowerName>_comm_init();
    <config.moduleTemplateRegisters:{ reg | <reg.name> = <reg.initial>;
    }>
  end

  final begin
    <config.moduleLowerName>_comm_free();
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
    end else begin
      <config.moduleLowerName>_comm_send(<config.dpiSendCallArgs>);
    end
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
    end else begin
      <config.moduleLowerName>_comm_recv(<config.dpiRecvCallArgs>);
    end
  end

endmodule

>>
