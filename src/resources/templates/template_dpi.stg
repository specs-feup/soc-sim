dpi_header(config) ::= <<
#ifndef <config.moduleUpperName>_DPI_H
#define <config.moduleUpperName>_DPI_H

#ifdef __cplusplus
extern "C" {
#endif

void <config.moduleLowerName>_comm_init();

void <config.moduleLowerName>_comm_free();

void <config.moduleLowerName>_comm_send(<config.dpiSendSignature>);

void <config.moduleLowerName>_comm_recv(<config.dpiRecvPointerParams>);

#ifdef __cplusplus
}
#endif

#endif // <config.moduleUpperName>_DPI_H
>>

dpi_source(config) ::= <<
#include "<config.moduleLowerName>dpi.h"
#include "backend/cipc_zmq.h"
#include \<cipc.h>
#include \<stdio.h>
#include \<stdlib.h>
#include \<string.h>
#include \<zmq.h>

#define <config.moduleUpperName>_ADDRESS "<config.e2Address>"
#define <config.moduleUpperName>_BUFFER_SIZE 1024

static cipc **<config.moduleLowerName>_server = NULL;

void <config.moduleLowerName>_comm_init() {
  <config.moduleLowerName>_server = (cipc**)malloc(sizeof(cipc*));
  if (!<config.moduleLowerName>_server) {
    printf("Failed to allocate memory for server!\\n");

    exit(EXIT_FAILURE);
  }

  *<config.moduleLowerName>_server = cipc_create(CIPC_PROTOCOL_ZMQ);
  if (!(*<config.moduleLowerName>_server)) {
    printf("Failed to create server!\\n");

    exit(EXIT_FAILURE);
  }

  cipc_zmq_config *config = cipc_zmq_config_rep(<config.moduleUpperName>_ADDRESS);
<config.opt2Entries:{entry |
  config->sockopt_<entry.key> = <entry.value>;
}>
  if ((*<config.moduleLowerName>_server)->init(&(*<config.moduleLowerName>_server)->context, config) != CIPC_OK) {
    printf("Failed to initialize server!\\n");

    <config.moduleLowerName>_comm_free();

    exit(EXIT_FAILURE);
  }
}

void <config.moduleLowerName>_comm_free() {
  if (<config.moduleLowerName>_server) {
    if (*<config.moduleLowerName>_server)
      cipc_free(*<config.moduleLowerName>_server);

    free(<config.moduleLowerName>_server);

    <config.moduleLowerName>_server = NULL;
  }
}

void <config.moduleLowerName>_comm_send(<config.dpiSendSignature>) {
  char buffer[<config.moduleUpperName>_BUFFER_SIZE] = {0};

  size_t length = snprintf(buffer, sizeof(buffer), "<config.dpiSendFormat>", <config.dpiSendCallArgs>);

  if ((*<config.moduleLowerName>_server)->send((*<config.moduleLowerName>_server)->context, buffer, length) != CIPC_OK) {
    printf("Failed to send reply!\\n");
  } else {
    printf("Sent: <config.dpiSendFormat>\\n", <config.dpiSendCallArgs>);
  }
}

void <config.moduleLowerName>_comm_recv(<config.dpiRecvPointerParams>) {
  char buffer[<config.moduleUpperName>_BUFFER_SIZE] = { 0 };

  if ((*<config.moduleLowerName>_server)->recv((*<config.moduleLowerName>_server)->context, buffer, sizeof(buffer)) != CIPC_OK)
    printf("Failed to receive message!\\n");

  if (sscanf(buffer, "<config.dpiRecvFormat>", <config.dpiRecvCallArgs>) != <config.moduleRegisterCount>)
    printf("Failed to parse received data!\\n");
}
>>
