sv_interface(module) ::= <<
module <module.lowerName> #(
    parameter type reg_req_t  = logic,
    parameter type reg_rsp_t  = logic,
    parameter type obi_req_t  = logic,
    parameter type obi_resp_t = logic
) (
    input logic clk_i,
    input logic rst_ni,
    <if(module.hasReg)>
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o<if(module.hasObiMaster || module.hasObiSlave)>,<endif>
    <endif>
    <if(module.hasObiMaster)>
    output obi_req_t masters_req_o,
    output obi_resp_t masters_resp_i<if(module.hasObiSlave)>,<endif>
    <endif>
    <if(module.hasObiSlave)>
    input obi_req_t slave_req_i,
    output obi_resp_t slave_resp_o
    <endif>
);

  <module.templateRegisters:{ reg | <reg.verilogType> [<reg.widthMinusOne>:0] <reg.name>;
  }>
  import "DPI-C" function void <module.lowerName>_comm_init();
  import "DPI-C" function void <module.lowerName>_comm_free();
  import "DPI-C" function void <module.lowerName>_comm_send(<module.dpiSendSignature>);
  import "DPI-C" function void <module.lowerName>_comm_recv(<module.dpiRecvSignature>);

  initial begin
    <module.lowerName>_comm_init();
    <module.templateRegisters:{ reg | <reg.name> = <reg.initial>;
    }>
  end

  final begin
    <module.lowerName>_comm_free();
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
    end else begin
      <module.lowerName>_comm_send(<module.dpiSendCallArgs>);
    end
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
    end else begin
      <module.lowerName>_comm_recv(<module.dpiRecvCallArgs>);
    end
  end

endmodule
>>
